#! /usr/bin/env python
#  -*- coding: utf-8 -*-
# filipemarch
# Support module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Mar 04, 2021 11:29:10 PM -03  platform: Linux
#    Mar 04, 2021 11:31:13 PM -03  platform: Linux
#    Mar 04, 2021 11:35:01 PM -03  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def set_Tk_var():
    global result_label2
    result_label2 = tk.StringVar()
    result_label2.set('Insira Número Decimal')

    global result_label
    result_label = tk.StringVar()
    result_label.set('Insira Número Binário')

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def bin_to_dec():
    """Converte de binário para decimal"""
    numero_em_binario =  w.Entry1.get()

    try:
        inteira = list(numero_em_binario[:numero_em_binario.index(',')])
    except ValueError:
        inteira = numero_em_binario

    # print(f'Parte inteira: {inteira}')
    soma_inteira = [2**i*j for i,j in zip(range(len(inteira)), [int(x) for x in inteira[::-1]])]
    # print('Dígitos a somar: ', soma_inteira[::-1])
    # print('Resultado inteiro: ', sum(soma_inteira))

    if ',' in numero_em_binario:
        decimal = list(numero_em_binario[numero_em_binario.index(',')+1:])
        # print(f'Parte decimal: {decimal}')
        soma_decimal = [2**i*j for i,j in zip(range(-1, -len(decimal)-1, -1), [int(x) for x in decimal])]
        # print('Dígitos a somar: ', soma_decimal)
        # print('Resultado decimal: ', sum(soma_decimal))

    try:    
        resultado_final = str(sum(soma_inteira)) + ',' + str(sum(soma_decimal))[2:]
    except UnboundLocalError:
        resultado_final = str(sum(soma_inteira))

    resultado_final = resultado_final[:15]
    result_label.set(str(resultado_final))

def dec_to_bin():
    """Converte de base decimal para base binária"""
    numero_em_decimal = w.Entry1_1.get()

    try:
        inteira = float(numero_em_decimal[:numero_em_decimal.index(',')])
    except ValueError:
        inteira = float(numero_em_decimal)

    # print(f'Parte inteira: {inteira}')
    
    result_inteiro = []
    temp = inteira
    while temp//2 != 0:
        result_inteiro.append(temp%2)
        temp = temp//2
    else:
        result_inteiro.append(temp)

    result_inteiro = ''.join([str(j) for j in [int(i) for i in result_inteiro[::-1]]])

    # print(resultado_final)

    if ',' in numero_em_decimal:
        decimal = numero_em_decimal[numero_em_decimal.index(',')+1:]
        decimal = '0.' + decimal
        print(f'Parte decimal: {decimal}')

        result_decimal = []

        while float(decimal[2:]) != 0:
            temp = str(float(decimal)*2)
            result_decimal.append(temp[0])
            if float(temp) > 1:
                decimal = str(float(temp) - 1)
            else:
                decimal = str(float(temp))

        result_decimal = ''.join(result_decimal)


    try:    
        resultado_final = result_inteiro + ',' + result_decimal
    except UnboundLocalError:
        resultado_final = result_inteiro

    resultado_final = resultado_final[:15]
    result_label2.set(resultado_final)


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import calculadora_bin_to_dec
    calculadora_bin_to_dec.vp_start_gui()





